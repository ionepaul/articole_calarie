@model ArticoleCalarie.Models.ProductViewModel

@{
    ViewBag.Title = "View";
}

<style>
    .ui-autocomplete-custom {
        background: #87ceeb;
        z-index: 2;
    }

    .selected {
        opacity: 0.5;
    }

    #progress-wrp {
        border: 1px solid #0099CC;
        padding: 1px;
        position: relative;
        height: 30px;
        border-radius: 3px;
        margin: 10px;
        text-align: left;
        background: #fff;
        box-shadow: inset 1px 3px 6px rgba(0, 0, 0, 0.12);
    }

        #progress-wrp .progress-bar {
            height: 100%;
            border-radius: 3px;
            background-color: #f39ac7;
            width: 0;
            box-shadow: inset 1px 1px 10px rgba(0, 0, 0, 0.11);
        }

        #progress-wrp .status {
            top: 3px;
            left: 50%;
            position: absolute;
            display: inline-block;
            color: #000000;
        }
</style>
<h2>View</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>ProductViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input id="categoryAutocomplete" type="text" class="input-info" />
                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MaterialDetails, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.MaterialDetails, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MaterialDetails, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="col-md-2">Images</label>
            <div class="col-md-10">
                <input type="file" multiple onchange="previewAndUpload(this, false)" />
                <div id="imgDirectory">
                </div>
            </div>
        </div>

        <div class="form-group">
            <label class="col-md-2">Size Chart</label>
            <div class="col-md-10">
                <div id="sizeChartImgContainer">
                </div>
                <div id="newChartSizeImgContainer">
                </div>

                <input type="file" onchange="previewAndUpload(this, true)" />
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>

    @Html.HiddenFor(m => m.CategoryId);
    @Html.HiddenFor(m => m.Images);
    @Html.HiddenFor(m => m.SizeChartImage);
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jquery-ui")
}

<script>

    $(document).ready(function () {
        loadSizeCharts();

        $("#categoryAutocomplete").autocomplete({
            source: function (request, response) {
                $.getJSON('/Category/GetCategories?term=' + request.term, function (data) {
                    if (data.length == 0) {
                        $('#CategoryId').val(request.term);
                    }
                    response($.map(data, function (item) {
                        return {
                            label: item.Name,
                            value: item.Id
                        };
                    }));
                });
            },
            minLength: 2,
            focus: function (event, ui) {
                var categoryName = ui.item.label;
                $(this).val(categoryName);
                event.preventDefault();
            },
            select: function (event, ui) {
                event.preventDefault();
                var categoryName = ui.item.label;
                $(this).val(categoryName);
                $('#CategoryId').val(ui.item.value);
            }
        });
    });

    function previewAndUpload(input, isSizeChart) {
        if (input.files) {
            $.each(input.files, function (i, file) {
                var formattedFileName = file.name.replace(' ', '').replace('-', '').replace('_', '');
                var containerId = formattedFileName.replace('.', '');

                var upload = new Upload(file, isSizeChart);
                upload.doUpload();

                var ImageDir = new FileReader();
                ImageDir.onload = function (e) {
                    if (!isSizeChart) {
                        $('#imgDirectory').append('<div id="' + containerId + '"></div>');
                        $('#' + containerId).append('<div id="progress-wrp"><div class="progress-bar"></div><div class="status">0%</div></div>');
                        $('#' + containerId).append('<img src="' + e.target.result + '" height="100" />');
                        $('#' + containerId).append('<a onclick="deleteImage(\'' + formattedFileName + '\')">delete image</a>');
                    } else {
                        $('#newChartSizeImgContainer').append('<div id="' + containerId + '"></div>');
                        $('#' + containerId).append('<div id="progress-wrp"><div class="progress-bar"></div><div class="status">0%</div></div>');
                        $('#' + containerId).append('<img src="' + e.target.result + '" height="100" />');
                        $('#' + containerId).append('<a onclick="deleteImage(\'' + formattedFileName + '\')">delete image</a>');
                    }
                }

                ImageDir.readAsDataURL(file);
            });
        }
    }

    var savedImages = new Array();
    
    var Upload = function (file, isSizeChart) {
        this.file = file;
        this.isSizeChart = isSizeChart;
    };

    Upload.prototype.getType = function () {
        return this.file.type;
    };
    Upload.prototype.getSize = function () {
        return this.file.size;
    };
    Upload.prototype.getName = function () {
        return this.file.name;
    };
    Upload.prototype.doUpload = function () {
        var that = this;
        var formData = new FormData();
        
        // add assoc key values, this will be posts values
        formData.append("file", this.file, this.getName());
        formData.append("upload_file", true);

        $.ajax({
            type: "POST",
            url: "UploadImage",
            xhr: function () {
                var myXhr = $.ajaxSettings.xhr();
                if (myXhr.upload) {
                    myXhr.upload.addEventListener('progress', that.progressHandling, false);
                }
                return myXhr;
            },
            success: function (data) {
                if (!that.isSizeChart) {
                    savedImages.push(data);
                    $('#Images').val(savedImages);
                }
                else {
                    $('#SizeChartImage').val(data);
                }
            },
            error: function (error) {
                // handle error
            },
            async: true,
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            timeout: 60000
        });
    };

    Upload.prototype.progressHandling = function (event) {
        var percent = 0;
        var position = event.loaded || event.position;
        var total = event.total;
        var progress_bar_id = "#progress-wrp";
        if (event.lengthComputable) {
            percent = Math.ceil(position / total * 100);
        }
        // update progressbars classes so it fits your code
        $(progress_bar_id + " .progress-bar").css("width", +percent + "%");
        $(progress_bar_id + " .status").text(percent + "%");
    };

    function deleteImage(fileName) {
        $.ajax({
            type: "POST",
            url: "DeleteImage?filename=" + fileName,
            success: function () {
                $('#' + fileName.replace('.', '')).remove();
            },
            error: function (error) {
                // handle error
            },
            async: true,
            timeout: 60000
        });
    }

    function loadSizeCharts() {
        $.ajax({
            type: "GET",
            url: "GetSizeCharts",
            success: function (data) {
                console.log(data);
                if (data && data.length > 0) {
                    $.each(data, function (i, sizeChart) {
                        $('#sizeChartImgContainer').append('<img id="' + i + '"src="' + window.location.origin + '/images/products/' + sizeChart.FileName + '" height="200" onclick="selectSizeChart(' + sizeChart.Id + ')"/>');
                    });
                }
            },
            error: function (error) {
                // handle error
            },
            async: true,
            timeout: 60000
        });
    }

    function selectSizeChart(sizeChartId) {
        $('#sizeChartImgContainer img').removeClass('selected');
        $('#sizeChartImgContainer img#' + sizeChartId).addClass('selected');
        $('#SizeChartImage').val(sizeChartId);
    }
</script>