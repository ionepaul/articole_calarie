@model ArticoleCalarie.Models.AddressViewModel
@using ArticoleCalarie.Models.Enums

@{ 
    var isBilling = Model?.AddressType == AddressTypeViewEnum.Billing;
    var isChecked = isBilling ? "" : "checked";
    var isHidden = isBilling ? "" : "hidden";
    var checkboxValue = isBilling ? "false" : "true";
}

@using (Ajax.BeginForm("UpdateBillingAddress", "Order", new AjaxOptions
{
    HttpMethod = "post",
    OnFailure = "failure",
    OnComplete = "formOnComplete",
    OnSuccess = "billingAddressOnSuccess"
}, new { @id = "billing-address-form", @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    <label class="checkbox-container">
        <input id="same-as-delivery-btn" type="checkbox" name="IsSameAsDelivery" value="@checkboxValue" @isChecked /> 
        <label class="checkbox-label" for="same-as-delivery-btn">Adresa de facturare este identitca cu cea de livrare.</label>
        <span class="checkbox-checkmark"></span>
    </label>
    <div id="billing-form-container" class="@isHidden">
        <div class="row">
            <div class="col-sm-6">
                <span class="label-text">Nume Complet <span>*</span></span>
                @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "input-info" } })
            </div>
            <div class="col-sm-6">
                <span class="label-text">Telefon <span>*</span></span>
                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "input-info" } })
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <span class="label-text">Adresa <span>*</span></span>
                @Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })
                @Html.EditorFor(model => model.AddressLine1, new { htmlAttributes = new { @class = "input-info" } })
            </div>
            <div class="col-sm-4">
                <span class="label-text">Detalii Adresa</span>
                @Html.EditorFor(model => model.AddressLine2, new { htmlAttributes = new { @class = "input-info" } })
            </div>
            <div class="col-sm-4">
                <span class="label-text">Cod Postal</span>
                @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger" })
                @Html.EditorFor(model => model.PostalCode, new { htmlAttributes = new { @class = "input-info" } })
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4">
                <span class="label-text">Judet <span>*</span></span>
                @Html.ValidationMessageFor(model => model.County, "", new { @class = "text-danger" })
                @Html.EditorFor(model => model.County, new { htmlAttributes = new { @class = "input-info" } })
            </div>
            <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4">
                <span class="label-text">Oras <span>*</span></span>
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "input-info" } })
            </div>
            <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4">
                <span class="label-text">Tara <span>*</span></span>
                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "input-info", @disabled = "@disabled" } })
            </div>
        </div>
    </div>
    <div class="group-button">
        <a id="checkout-save-billing-address-btn" class="submit no-loading">Confirma</a>
    </div>
}

